{-
Выполняются ли для стандартных представителей Applicative, Alternative, Monad и MonadPlus типа данных Maybe следующие законы дистрибутивности:

(u <|> v) <*> w       =    u <*> w <|> v <*> w

(u `mplus` v) >>= k   =    (u >>= k) `mplus` (v >>= k)
Если нет, то приведите контрпример, если да, то доказательство.

Предполагается, что расходимости отсутствуют.
-}

{-
instance  Functor Maybe  where
    fmap _ Nothing       = Nothing
    fmap f (Just a)      = Just (f a)
-}

{-
instance Alternative Maybe where
    empty = Nothing
    Nothing <|> r = r
    l       <|> _ = l
-}

{-
instance Applicative Maybe where
    pure = Just

    Just f  <*> m       = fmap f m
    Nothing <*> _m      = Nothing
-}

{-
instance  Monad Maybe  where
    (Just x) >>= k      = k x
    Nothing  >>= _      = Nothing
-}

{-
instance MonadPlus Maybe
-}

* m <*> Nothing == Nothing
a. Nothing <*> Nothing = Nothing -- def <*>
b. Just f <*> Nothing = fmap f Nothing = Nothing -- def <*>, fmap

1. (u <|> v) <*> w = u <*> w <|> v <*> w
-- Let u = Nothing
a. (Nothing <|> v) <*> w = v <*> w -- def <|>
b. (Nothing <*> w) <|> (v <*> w) = Nothing <|> (v <*> w) = v <*> w -- def <*>, <|>

-- Let u = Just f
a. (Just f <|> v) <*> w = Just f <*> w -- def <|>
b. (Just f <*> w) <|> (v <*> w)

-- -- Let w = Nothing
a. Just f <*> Nothing = Nothing -- *
b. (Just f <*> Nothing) <|> (v <*> Nothing) = Nothing <|> Nothing = Nothing -- *, def <|>

-- -- Let w = Just x
a. Just f <*> Just x = fmap f (Just x) = Just (f x) -- def <*>, fmap
b. (Just f <*> Just x) <|> (v <*> Just x) = Just (f x) <|> (v <*> Just x) = Just (f x) -- a, def <|>


2. False: (u `mplus` v) >>= k = (u >>= k) `mplus` (v >>= k)
(u <|> v) >>= k != (u >>= k) <|> (v >>= k) -- def mplus

-- Let k, u, v
k x | x < 0 = Nothing
k x = Just x

u = Just -5
v = Just 5

(Just -5 <|> Just 5) >>= k = (Just -5) >>= k = k (-5) = Nothing -- def <|>, >>=, k
(Just -5 >>= k) <|> (Just 5 >>= k) = k (-5) <|> k 5 = Nothing <|> Just 5 = Just 5 -- def >>=, k, <|>

Nothing != Just 5

